#title MTorus -- detailed description
#style Wiki/styles/mtorus.css


* Documentation

This is a rather detailed documentation sketch.
You may want to see it as our mnemonic to the stuff we've hacked so far.

In the near term future there will also be a texinfo documentation.

- [[DetailedDescription#whatis][What is MTorus]]
- [[DetailedDescription#backend][The MTorus backend]]
- [[DetailedDescription#types][The MTorus types]]
- [[DetailedDescription#elements][The MTorus elements]]
- [[DetailedDescription#topologies][The MTorus topology]]


#whatis
** What is MTorus

MTorus lets you work with several groups of buffers,
each group being a separate ring.
This grouping can be used to form logically united sets of buffers.

There could be a group for quick edit of the emacs configuration files 
while you're actually working on some (Ruby/Perl/whatever-) program
or it could be all the headers of your C project
while all the .c-files make up another group.

Whatever you can think of.
You could even make different parts of your buffers (point positions)
show up in different groups like when one set of functions spread
throughout one (or more) files is responsible for one specific task
or like working on a chapter in a <nowiki>LaTeX</nowiki>-document
while defining some macros at the top of the file.

Choosing another element in such a group is done by actually cycling
through the group (like with e.g. the kill-ring).
And since we can cycle in the `other' direction through a collection
of those rings we are using a Torus here.
(A "group" will usually be referred to as a "ring" from now.)

Of course this is just a basic description of what MTorus _can_ do. :)

*** The new concept

The new conception allows to create more types than these basic ones
we've discussed so far.
For compatibility (what compatability?) reasons and sticking to habits
we have code on-board to predefine the types you already know
(rings, buffers and markers).

Basically we decided (and I'm carefully doing anything possible) to 
keep as much stuff as possible from the MTorus 1.6 Revision (which has been
chosen to be the revision to fork off).

Part of the new concept is the division of MTorus into a frontend
(which is usable and usually just seen by the user) and a backend.
The backend consists of different modules that provide the actual
functionality to MTorus.

I really hope to see some contribution in form of other useful modules, though :)


#backend 
** The backend in detail

The first new thing you will notice is that in former times an mtorus consisted
of two categories of basic types: Namely rings and some other category usually
seen as the elements of the rings (buffers/markers).

However we got rid of this and implemented a more abstract view of this.
Currently there are elements only plus one specially treated symbol acting as
container: the mtorus-universe.

Actually this container is an element itself (namely one of type `ring'), but for
bootstrapping issues it is existent before any other element exists.
It is added to itself once it comes to initialization.

You eventually want to bootstrap manually, this can be done by

=M-x mtorus-element-initialize RET=

To learn more about elements, see [[DetailedDescription#elements][The MTorus elements]]

<br/>

On the other hand, you may freely define the _type_ of an element.
As mentioned before there are predefined types you can initialize by

=M-x mtorus-type-initialize RET=

Any MTorus element is of a certain type, classifying this element.
Types thus provide (equal) means (for equal types) to access the functionality of the element.
See [[DetailedDescription#types][The MTorus types]] for more on types.

<br/>

Also, the way of arranging elements within the torus has been completely revised.
It's rather abstractly done with the concept of _topologies_.
You can have more than one topology of course and there is a predefined one
which you can initialize by

=M-x mtorus-topology-initialize RET=

Any topology defines neighborhoods for given elements specifying
which elements are `next' to a given one.
The especially new about this concept is that you can `detach' elements
from their current ring or whatever and attach it to some other ring.

You may want to see the torus as three-step mechanism to actually achieve
something you can navigate on:
1. First you choose some objects from the list of all objects and declare them mtorus-elements.
1. Then you specify the types of these elements in order to equip the element with some functionality.
1. Finally you arrange your chosen elements to some network-esque structure that you can navigate on.

See [[DetailedDescription#topologies][The MTorus topology]] for more on topologies.


#types
** The MTorus types

MTorus types are yet to be defined.
We currently provide just a small pre-defined set of types: the mtorus-ring, the
mtorus-buffer and the mtorus-marker.

Instead of providing these hard-coded we concentrate our effort on effectively
providing methods to create those types yourselves.

Generation of types can be done rather simply by calling the type-creation handler and
providing some information, for example:
- the name of the type
- predicate function(s) to determine if given elements are of this type
- function(s) to call when adding/deleting elements to elements of this type
- function(s) to call when selecting/deselecting elements of this type
and so on.

Due to our personal annoyances at most packages for the absence of hooks 
(and thus preventing lots of defadvices) we decided to provide
hooks for _everything_.

That's why there are hooks lists that provide some sort of methodology on
currently available features.

At the moment following hooks are predefined:
- (predicate . p)
- (pre-creation . pre-creation-funs)
- (post-creation . post-creation-funs)
- (pre-deletion . pre-deletion-funs)
- (post-deletion . post-deletion-funs)
- (pre-selection . pre-selection-funs)
- (post-selection . post-seletion-funs)
- (pre-deselection . pre-deselection-funs)
- (post-deselection . post-deselection-funs)

Let's discuss the hooks in detail

- predicate
predicate function(s) to validate elements.
Any of these function(s) should return `non-nil' iff element
is of the specified type

- pre-creation
function(s) to be called just before some element of the
specified type is about to be created

- post-creation
function(s) to be called after some element of the
specified type has been created

- pre-deletion
function(s) to be called just before some element of the
specified type is about to be deleted

- post-deletion
function(s) to be called after some element of the
specified type has been deleted

- pre-selection
function(s) to be called just before some element of this type
is selected.

- post-selection
function(s) to be called after some element of this type
has been selected.

- pre-deselection
function(s) to be called just before some element of this type
is deselected (i.e. another element is selected).
This hook is actually almost the same as pre-selection but
it is called with the `old' element in contrast

- post-deselection
function(s) to be called after some element of this type
has been deselected (i.e. another element is selected).
This hook is actually almost the same as post-selection but
it is called with the `old' element in contrast

You will realize that exactly the actions in between the pre- and post-
hooks are the hook actions run by mtorus-element elements.

*** Predefined Types
However, there are some predefined types, namely ring, marker and buffer.
At the moment you have to invoke <code>mtorus-type-initialize</code> to
use one of these.

Let's discuss the types in detail:

ring |
Actually ring tries to simulate mtorus-1.6 rings.
marker |
Actually marker tries to simulate mtorus-1.6 markers.
buffer |
Almost the same as marker, but does not save a position in the buffer
but the buffer itself.


#elements
** The MTorus elements

Once you have created some types you can start creating elements using these types.
For the creation of an element you provide some of the following information:
- function(s) that can determine the next/previous element
- function(s) to be called when reading from the element
- function(s) to be called when saving to the element
- function(s) to be called when the element is altered

I finally decided to organize elements in hash-tables because
- they are fast
- they have opaque support for basic operations 
  (such as adding, altering and removing of keys)
- they are easy to dump
- they approximate the set property of the mtorus-elements best
  (the arrangement order of the elements within the container is not
   not needed, further lists have longer access times for elements 
   beyond the cdddddddd...ddddddddr of the list)

Though hash-tables themselves provide various facilties to not put
or get accidentally elements with the same key, the keys put into
this hash-table are (per default) 8 digits hexadecimal random number
cookies.

At the moment it's uncertain how the hash-table-entries look like.
At least for every bound element that is in use there's a hash-key.


#topologies
** The MTorus topology

We use a rather straightforward network/graph structure to induce a graph
(and thus a topology) on the set of elements.

The whole topology is handled by `mtorus-topology-alist'
These functions are really generic and neither per-type nor per-element!

If you want to hook into one of the latter cases use
`mtorus-type-hooks-alist' and `mtorus-element-hooks-alist' respectively.

Entries look like
  \(hook-specifier . hook-name\)

Any of these is essential for MTorus and listed here:

- next-element 
According to the sketch below this function determines the brother
of an element.

- prev-element
According to the sketch below this function determines the sister
of an element.

- parent-element
According to the sketch below this function determines the father
of an element.

- child element
According to the sketch below this function determines the son
of an element.

Of course the other relatives are computed as follows:
- aunt = sister of father
- uncle = brother of father
- daughter = sister of son

Topology sketch:

<pre>        aunt - father - uncle      </pre>
<pre>            \    &#124     /            </pre>
<pre> sister - CurrentElement - brother </pre>
<pre>            /         \            </pre>
<pre>        daughter        son        </pre>


Furthermore it is obvious that relative elements does not necessarily
have to be distinct, i.e. it is possible to form networks where the
aunt of an element is its brother.

*** Auto-Attaching

*** Orders




<!--
Local Variables:
emacs-wiki-publishing-header: "./includes/header"
emacs-wiki-publishing-footer: "./includes/footer"
End:
-->
